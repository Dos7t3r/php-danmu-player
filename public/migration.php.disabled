<?php
/**
* OldBili Player v2.0.0 - 数据迁移工具
* 
* 此脚本用于将旧版OldBili Player的数据迁移到新版ThinkPHP版本
*/

// 定义应用目录
define('APP_PATH', __DIR__ . '/../app/');

// 加载框架引导文件
require __DIR__ . '/../vendor/autoload.php';

// 设置执行时间，防止超时
set_time_limit(0);
ini_set('memory_limit', '512M');

// 显示错误
ini_set('display_errors', 1);
ini_set('display_startup_errors', 1);
error_reporting(E_ALL);

// 加载环境变量
$env = parse_ini_file(__DIR__ . '/../.env', true);

// 新版配置
$newConfig = [
   'db_host' => $env['DATABASE']['HOSTNAME'] ?? 'localhost',
   'db_user' => $env['DATABASE']['USERNAME'] ?? '',
   'db_pass' => $env['DATABASE']['PASSWORD'] ?? '',
   'db_name' => $env['DATABASE']['DATABASE'] ?? '',
];

// 检查新版配置
if (empty($newConfig['db_user']) || empty($newConfig['db_name'])) {
   die("错误：新版数据库配置不完整，请检查.env文件");
}

// 处理表单提交
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
   // 获取旧版配置
   $oldConfig = [
       'db_host' => $_POST['old_db_host'] ?? 'localhost',
       'db_user' => $_POST['old_db_user'] ?? '',
       'db_pass' => $_POST['old_db_pass'] ?? '',
       'db_name' => $_POST['old_db_name'] ?? '',
   ];
   
   // 验证旧版配置
   if (empty($oldConfig['db_user']) || empty($oldConfig['db_name'])) {
       $error = "旧版数据库配置不完整";
   } else {
       // 连接旧数据库
       try {
           $oldPdo = new PDO(
               "mysql:host={$oldConfig['db_host']};dbname={$oldConfig['db_name']};charset=utf8mb4",
               $oldConfig['db_user'],
               $oldConfig['db_pass'],
               [
                   PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
                   PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
                   PDO::ATTR_EMULATE_PREPARES => false,
               ]
           );
           
           // 连接新数据库
           $newPdo = new PDO(
               "mysql:host={$newConfig['db_host']};dbname={$newConfig['db_name']};charset=utf8mb4",
               $newConfig['db_user'],
               $newConfig['db_pass'],
               [
                   PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
                   PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
                   PDO::ATTR_EMULATE_PREPARES => false,
               ]
           );
           
           // 开始迁移
           $migrationLog = [];
           
           // 迁移视频数据
           $migrationLog[] = "开始迁移视频数据...";
           
           // 获取旧视频数据
           $stmt = $oldPdo->query("SELECT * FROM videos");
           $videos = $stmt->fetchAll();
           
           // 清空新表
           $newPdo->exec("TRUNCATE TABLE obp_videos");
           
           // 插入新表
           $stmt = $newPdo->prepare("
               INSERT INTO obp_videos (
                   id, title, video_url, subtitle_url, 
                   description, status, create_time, update_time
               ) VALUES (
                   :id, :title, :video_url, :subtitle_url, 
                   :description, :status, :create_time, :update_time
               )
           ");
           
           $videoCount = 0;
           foreach ($videos as $video) {
               $stmt->execute([
                   'id' => $video['id'],
                   'title' => $video['title'],
                   'video_url' => $video['video_url'],
                   'subtitle_url' => $video['subtitle_url'] ?? null,
                   'description' => '',
                   'status' => 1,
                   'create_time' => date('Y-m-d H:i:s'),
                   'update_time' => date('Y-m-d H:i:s')
               ]);
               $videoCount++;
           }
           
           $migrationLog[] = "成功迁移 {$videoCount} 条视频数据";
           
           // 迁移弹幕数据
           $migrationLog[] = "开始迁移弹幕数据...";
           
           // 获取所有danmu_表
           $stmt = $oldPdo->query("SHOW TABLES LIKE 'danmu_%'");
           $tables = $stmt->fetchAll(PDO::FETCH_COLUMN);
           
           foreach ($tables as $table) {
               // 提取视频ID
               $videoId = str_replace('danmu_', '', $table);
               
               // 创建新表
               $newTable = "obp_danmu_{$videoId}";
               $newPdo->exec("
                   CREATE TABLE IF NOT EXISTS `{$newTable}` (
                       id INT AUTO_INCREMENT PRIMARY KEY,
                       text TEXT NOT NULL,
                       time FLOAT NOT NULL,
                       mode INT DEFAULT 0,
                       color VARCHAR(20) DEFAULT '#FFFFFF',
                       timestamp BIGINT NOT NULL,
                       created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                   ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci
               ");
               
               // 清空新表
               $newPdo->exec("TRUNCATE TABLE `{$newTable}`");
               
               // 获取旧数据
               $stmt = $oldPdo->query("SELECT * FROM `{$table}`");
               $danmakus = $stmt->fetchAll();
               
               // 插入新表
               $stmt = $newPdo->prepare("
                   INSERT INTO `{$newTable}` (
                       text, time, mode, color, timestamp
                   ) VALUES (
                       :text, :time, :mode, :color, :timestamp
                   )
               ");
               
               $count = 0;
               foreach ($danmakus as $danmaku) {
                   $stmt->execute([
                       'text' => $danmaku['text'],
                       'time' => $danmaku['time'],
                       'mode' => $danmaku['mode'],
                       'color' => $danmaku['color'],
                       'timestamp' => $danmaku['timestamp']
                   ]);
                   $count++;
               }
               
               $migrationLog[] = "表 {$table} -> {$newTable}: 迁移 {$count} 条弹幕";
           }
           
           // 迁移在线用户数据
           $migrationLog[] = "开始迁移在线用户数据...";
           
           // 检查旧表是否存在
           $stmt = $oldPdo->query("SHOW TABLES LIKE 'online_users'");
           if ($stmt->rowCount() > 0) {
               // 获取旧数据
               $stmt = $oldPdo->query("SELECT * FROM online_users");
               $users = $stmt->fetchAll();
               
               // 清空新表
               $newPdo->exec("TRUNCATE TABLE obp_online_users");
               
               // 插入新表
               $stmt = $newPdo->prepare("
                   INSERT INTO obp_online_users (
                       user_id, video_id, ip_address, last_active
                   ) VALUES (
                       :user_id, :video_id, :ip_address, :last_active
                   )
               ");
               
               $count = 0;
               foreach ($users as $user) {
                   $stmt->execute([
                       'user_id' => $user['user_id'],
                       'video_id' => $user['video_id'],
                       'ip_address' => '',
                       'last_active' => $user['last_active']
                   ]);
                   $count++;
               }
               
               $migrationLog[] = "成功迁移 {$count} 条在线用户数据";
           } else {
               $migrationLog[] = "旧数据库中不存在在线用户表，跳过迁移";
           }
           
           $migrationLog[] = "数据迁移完成！";
           $success = true;
           
       } catch (PDOException $e) {
           $error = "数据库错误: " . $e->getMessage();
       }
   }
}
?>
<!DOCTYPE html>
<html lang="zh-CN">
<head>
   <meta charset="UTF-8">
   <meta name="viewport" content="width=device-width, initial-scale=1.0">
   <title>OldBili Player v2.0.0 - 数据迁移工具</title>
   <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css">
   <style>
       body {
           background-color: #f8f9fa;
           padding-top: 40px;
       }
       .migration-container {
           max-width: 800px;
           margin: 0 auto;
           background: white;
           border-radius: 10px;
           box-shadow: 0 0 20px rgba(0,0,0,0.1);
           padding: 30px;
       }
       .logo {
           text-align: center;
           margin-bottom: 30px;
       }
       .logo h1 {
           color: #6c5ce7;
           font-weight: bold;
       }
       .migration-log {
           max-height: 300px;
           overflow-y: auto;
           background-color: #f8f9fa;
           padding: 15px;
           border-radius: 5px;
           font-family: monospace;
       }
       .migration-log p {
           margin-bottom: 5px;
       }
   </style>
</head>
<body>
   <div class="container migration-container">
       <div class="logo">
           <h1>OldBili Player v2.0.0</h1>
           <p class="text-muted">数据迁移工具</p>
       </div>
       
       <?php if (isset($error)): ?>
           <div class="alert alert-danger">
               <h4><i class="bi bi-exclamation-triangle-fill"></i> 错误</h4>
               <p><?php echo $error; ?></p>
           </div>
       <?php endif; ?>
       
       <?php if (isset($success) && $success): ?>
           <div class="alert alert-success">
               <h4><i class="bi bi-check-circle-fill"></i> 迁移成功</h4>
               <p>数据已成功从旧版迁移到新版。</p>
           </div>
           
           <div class="card mb-4">
               <div class="card-header">
                   <h5>迁移日志</h5>
               </div>
               <div class="card-body migration-log">
                   <?php foreach ($migrationLog as $log): ?>
                       <p><?php echo htmlspecialchars($log); ?></p>
                   <?php endforeach; ?>
               </div>
           </div>
           
           <div class="text-center">
               <a href="/" class="btn btn-primary">返回首页</a>
               <a href="/admin" class="btn btn-success">进入管理后台</a>
           </div>
       <?php else: ?>
           <div class="card mb-4">
               <div class="card-header">
                   <h5>数据迁移</h5>
               </div>
               <div class="card-body">
                   <p>此工具将帮助您将旧版OldBili Player的数据迁移到新版ThinkPHP版本。</p>
                   <p>请填写旧版数据库的连接信息：</p>
                   
                   <form method="post">
                       <div class="mb-3">
                           <label for="old_db_host" class="form-label">数据库主机</label>
                           <input type="text" class="form-control" id="old_db_host" name="old_db_host" value="localhost" required>
                       </div>
                       <div class="mb-3">
                           <label for="old_db_name" class="form-label">数据库名</label>
                           <input type="text" class="form-control" id="old_db_name" name="old_db_name" required>
                       </div>
                       <div class="mb-3">
                           <label for="old_db_user" class="form-label">用户名</label>
                           <input type="text" class="form-control" id="old_db_user" name="old_db_user" required>
                       </div>
                       <div class="mb-3">
                           <label for="old_db_pass" class="form-label">密码</label>
                           <input type="password" class="form-control" id="old_db_pass" name="old_db_pass">
                       </div>
                       
                       <div class="alert alert-info">
                           <p><strong>注意：</strong> 新版数据库配置已从.env文件读取：</p>
                           <ul>
                               <li>数据库主机: <?php echo htmlspecialchars($newConfig['db_host']); ?></li>
                               <li>数据库名: <?php echo htmlspecialchars($newConfig['db_name']); ?></li>
                               <li>用户名: <?php echo htmlspecialchars($newConfig['db_user']); ?></li>
                           </ul>
                       </div>
                       
                       <div class="alert alert-warning">
                           <p><strong>警告：</strong> 迁移过程将清空新版数据库中的现有数据。请确保已备份重要数据。</p>
                       </div>
                       
                       <button type="submit" class="btn btn-primary">开始迁移</button>
                   </form>
               </div>
           </div>
       <?php endif; ?>
       
       <div class="text-center mt-4 text-muted">
           <p>OldBili Player v2.0.0 &copy; 2023-2024</p>
       </div>
   </div>
   
   <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
